<style>
    main{
        text-align: center;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .tabela {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
    }

    .conteudo, .adicionar-obra {
        background-color: var(--cor-transparente);
        padding-top: 10px;
        padding-bottom: 10px;
        text-align: center;
        border-radius: 4px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
        height: 300px;
    }

    .conteudo .capa, .adicionar-obra .capa {
        max-height: 80%;
        max-width: 90%;
        width: auto;
        border-radius: 4px;
        object-fit:contain;
        cursor: url('/img/cursor-mao.png'), auto;
    }

    .conteudo h1, .adicionar-obra h1, .popup-conteudo #nome-imagem {
        font-size: 16px;
        font-weight: bold;
        color: #333;
        text-transform: uppercase;
        margin-left: 3px;
        margin-right: 3px;
    }

    .status-acoes {
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        gap: 10px;
    }
</style>

<link rel="stylesheet" href="/geral/popup.css">
<link rel="stylesheet" href="/pages/watchlist/pesquisa.css">

<main>
    <h2 style="text-align: center; align-items: center;">WatchList do Boteco</h2>
    
    <div class="caixa-texto">
        <h4>Quer sugerir filme/série?</h4>
        <h5>clique na aba com +</h5>
    </div>

    <div class="container">
        <div class="tabela">
            <!-- Aqui serão inseridas as obras -->
        </div>
    </div>

    <div id="popup" class="popup" style="display: none;">
        <div id="popup-conteudo" class="popup-conteudo">
            <!-- Aqui será inserido conteudo do popup -->
        </div>
    </div>

    <div id="popup-pesquisa" class="popup" style="display: none;">
        <div id="popup-conteudo" class="popup-conteudo">
            <h2>Enviar obra</h2>
            <div id="search-form">
                <input type="text" id="search-input" placeholder="Enter movie name">
            </div>
            <div class="acoes">
                <button class="branco" onclick="fecharPopupPesquisa()">Fechar</button>
            </div>
            <div id="results"></div>
        </div>
    </div>

    
    <!-- Popup de confirmação de exclusão -->
    <div id="popup-confirmacao" class="popup" style="display: none;">
        <div id="popup-confirmacao-conteudo" class="popup-conteudo">
            <p>Tem certeza de que deseja excluir esta obra?</p>
            <div class="acoes">
                <button id="confirmarDelecaoBtn" class="deletar">Sim, excluir</button>
                <button onclick="fecharConfirmacao()" class="branco">Cancelar</button>
            </div>
        </div>
    </div>
</main>

<script>

// Vetor de obras locais
let obraslocais = [];

document.addEventListener('DOMContentLoaded', () => carregarListaFirebase());

async function carregarListaFirebase() {
    OnLoadingScreen();
    try {
        const response = await fetch(`/watchlistdownload-movies`);
        const data = await response.json();

        // Verifique se a resposta é um array antes de atribuir a obraslocais
        if (Array.isArray(data)) {
            obraslocais = data;
        } else {
            console.error('Formato de dados inválido, esperado um array:', data);
            return;
        }

        console.log('Obras carregadas com sucesso!');
        listarObras();
    } catch (error) {
        console.error('Erro ao buscar obras do backend:', error);
    }
    OffLoadingScreen();
}

async function deleteMovie(id) {
    OnLoadingScreen();
    try {
        // Fazendo a requisição DELETE para o backend
        const response = await fetch(`/watchlistdelete-movie?id=${encodeURIComponent(id)}`, { method: 'DELETE' });
        const data = await response.json();

        if (data.success) {
            // Remove a obra localmente
            obraslocais = obraslocais.filter(obra => String(obra.id) !== String(id));

            // Atualiza a interface
            listarObras();
            OffLoadingScreen();
        } else {
            alert(data.message || 'Erro ao excluir a obra.');
            OffLoadingScreen();
        }
    } catch (error) {
        console.error('Erro ao deletar obra:', error);
        alert('Erro ao excluir a obra. Verifique a conexão.');
        OffLoadingScreen();
    }
}

function listarObras() {
    // Seleciona a tabela onde as obras serão exibidas
    const tabela = document.querySelector('.tabela');
    tabela.innerHTML = ''; // Limpa o conteúdo existente

    const quadroInicial = document.createElement('div');
    quadroInicial.className = 'conteudo';

    quadroInicial.innerHTML = `
            <img src="pages/lista/+.png" class="capa" alt="Adicionar" onclick="abrirPopupAdicionar()">
            <h1>Adicionar</h1>
        `;

    tabela.appendChild(quadroInicial)

    // Cria elementos para cada obra
    obraslocais.forEach(obra => {
        const conteudo = document.createElement('div');
        conteudo.className = 'conteudo';
        const posterPath = obra.poster_path ? `https://image.tmdb.org/t/p/w500${obra.poster_path}` : 'https://via.placeholder.com/200x300?text=No+Image';

        if (!obra.name) {
            conteudo.innerHTML = `
            <img src="${posterPath}" class="capa" alt="Capa de ${obra.title}" onclick="abrirPopup('${posterPath}', '${obra.title}')">
            <h1>${obra.title}</h1>
        `;
        }
        else{
            conteudo.innerHTML = `
            <img src="${posterPath}" class="capa" alt="Capa de ${obra.name}" onclick="abrirPopup('${posterPath}', '${obra.name}')">
            <h1>${obra.name}</h1>
        `;
        }

        tabela.appendChild(conteudo);
    });
}

function abrirPopupAdicionar() {
    const popup = document.getElementById('popup-pesquisa');
    const popupConteudo = document.getElementById('popup-conteudo');

    popup.style.display = 'flex';
    popupConteudo.style.display = 'block';
}

function abrirPopup(url, nome) {
    const popup = document.getElementById('popup');
    popup.style.display = '';
    const popupConteudo = document.getElementById('popup-conteudo');

    popupConteudo.innerHTML = `
        <img id="imagem-popup" src="${url}" alt="Imagem da obra">
        <div class="acoes">
            <button class="deletar" onclick="abrirConfirmacaoDelecao('${nome}')">Deletar</button>
            <button class="branco" onclick="fecharPopup()">Fechar</button>
        </div>
        <div id="nome-imagem" style="margin-top: 10px;">${nome}</div>
    `;

    popup.style.display = 'flex';
    const nomeImagem = document.getElementById('nome-imagem');
}

function abrirConfirmacaoDelecao(nome) {
    const popupConfirmacao = document.getElementById('popup-confirmacao');
    const confirmarDelecaoBtn = document.getElementById('confirmarDelecaoBtn');
    const obra = obraslocais.find(o => o.name === nome || o.title === nome); // Encontrar a obra pelo nome

    if (obra) {
        confirmarDelecaoBtn.setAttribute('data-id-obra', obra.id); // Passar o ID da obra
        popupConfirmacao.style.display = 'flex';
    } else {
        alert('Obra não encontrada!');
    }
}

function fecharPopup(){
    const popup = document.getElementById('popup');
    popup.style.display = 'none';
}

function fecharPopupPesquisa(){
    const popup = document.getElementById('popup-pesquisa');
    popup.style.display = 'none';
}

// Confirmar a exclusão diretamente ao clicar no botão
document.getElementById('confirmarDelecaoBtn').addEventListener('click', async function () {
    const idObra = this.getAttribute('data-id-obra'); // Obter o ID da obra
    if (idObra) {
        await deleteMovie(idObra);
    }
    fecharConfirmacao();
    fecharPopup();
});

function fecharConfirmacao() {
    const popupConfirmacao = document.getElementById('popup-confirmacao');
    popupConfirmacao.style.display = 'none';
}

let lastQuery = '';

document.getElementById('search-input').addEventListener('input', function() {
    
    const query = this.value;
    console.log('Buscando por:', query); // Adicionando log

    if (query.length < 3) {
        document.getElementById('results').innerHTML = '';
        return;
    }

    if (query.length !== lastQuery.length) {
        searchMovies(query);
    }
});

async function searchMovies(query) {
    console.log('Procurando por:', query); // Log de consulta
    lastQuery = query;

    try {
        const response = await fetch(`/watchlistsearch-movies?query=${encodeURIComponent(query)}&language='pt-BR'`);
        const data = await response.json();

        if (response.status !== 200) {
            throw new Error(data.message || 'Erro ao buscar filmes.');
        }

        displayResults(data);
    } catch (error) {
        console.error('Error:', error);
        // A função displayResults irá criar o elemento #results
        const resultsContainer = document.getElementById('results');
        if (resultsContainer) {
            resultsContainer.innerHTML = `<p>${error.message}</p>`;
        }
    }
}

function displayResults(items) {
        const resultsContainer = document.getElementById('results');
        resultsContainer.innerHTML = '';

        items.forEach(item => {
            const itemElement = document.createElement('div');
            itemElement.className = 'movie';

            const posterPath = item.poster_path ? `https://image.tmdb.org/t/p/w500${item.poster_path}` : 'https://via.placeholder.com/200x300?text=No+Image';
            const itemType = item.media_type === 'movie' ? 'Filme' : item.media_type === 'tv' ? 'Série' : 'Outro';

            itemElement.innerHTML = `
                <img src="${posterPath}" alt="${item.title || item.name}">
                <div class="movie-title">${item.title || item.name}</div>
                <div class="media-type">${itemType}</div>
            `;

            itemElement.addEventListener('click', () => {
                const shouldSave = confirm(`Deseja salvar "${item.title || item.name}" no Firebase Storage?`);
                if (shouldSave) {
                    saveMovieToFirebase(item);
                }
            });

            resultsContainer.appendChild(itemElement);
        });
    }

async function saveMovieToFirebase(movie) {
    OnLoadingScreen();
    try {
        // Enviando o filme/série para o backend
        const response = await fetch('/watchlistupload-movies', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(movie),
        });

        const data = await response.json();
        if (data.success) {
            // Adiciona o novo filme diretamente à lista local
            obraslocais.push({
                ...movie, // Dados do filme enviados
                fileUrl: data.fileUrl, // URL pública retornada
            });

            // Atualiza a interface sem recarregar tudo
            listarObras();
            fecharPopupPesquisa();
            OffLoadingScreen();
        } else {
            OffLoadingScreen();
            alert('Erro ao salvar o filme/série.');
        }
    } catch (error) {
        console.error('Erro ao salvar filme/série:', error);
        alert('Erro ao salvar o filme/série.');
        OffLoadingScreen();
    }
}
</script>