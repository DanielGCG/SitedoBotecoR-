<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/pages/forum/style/forum.css">
    <link rel="stylesheet" href="/pages/forum/style/novadiscussao.css">
    
    <link rel="stylesheet" href="/geral/better-popup/better-popup.css">
  </head>
  
  <div id="titulo-categoria" style="text-align: center; margin-bottom: 1rem;"><h2>Destaques</h2></div>
  <div class="forum-header">
    <input type="text" placeholder="Buscar tópicos ou categorias...">
    <button style="margin-left: 5px;" data-popup="novo-post-popup">Novo Post</button>
  </div>
  
  <div class="better-popup" id="novo-post-popup">
    <div class="better-popup-content">
        <button class="better-popup-close">X</button>
        <h2>Novo Post</h2>
        <form class="acoes" id="novo-post-form">
            <input type="text" id="discussao" placeholder="nome da discussão..." required>
            <button id="post">Publicar</button>
            <p id="statusMessage"></p>
        </form>
    </div>
  </div>
  
  
  <section class="publicacoes" id="publicacoes">
  </section>
  
  <script src="/geral/better-popup/better-popup.js"></script>

  <script>
function renderPublicacoes(publicacoes) {
    const publicacoesDiv = document.getElementById('publicacoes');
    publicacoesDiv.innerHTML = ''; // Limpa o conteúdo anterior

    if (!publicacoes || Object.keys(publicacoes).length === 0) {
        publicacoesDiv.innerHTML = `
            <div>
                <h2>Não há publicações ainda</h2>
            </div>
        `;
        return;
    }

    // Transforma o objeto em um array de publicações
    const publicacoesArray = Object.values(publicacoes);

    publicacoesArray.forEach((publicacao) => {
        if (!publicacao || typeof publicacao !== 'object') {
            console.warn("Publicação inválida encontrada:", publicacao);
            return;
        }

        const publicacaoDiv = document.createElement('div');
        publicacaoDiv.classList.add('publicacao');

        const ultimaAtualizacao = new Date(publicacao.time || Date.now());
        const tempoFormatado = `${ultimaAtualizacao.toLocaleDateString()} ${ultimaAtualizacao.toLocaleTimeString()}`;

        const autenticacaoUserId = localStorage.getItem("autenticationUserId");

        let conteudoHTML = `
            <div>
                <h3 class="discussao-title">
                    <a href="/forum/discussao?publicacaoId=${publicacao.publicacaoId}">
                        ${publicacao.discussaoTitle}
                    </a>
                </h3>
                <p class="discussao-info">
                    Por <a style="text-decoration: none; color: #333;" href="/forum/user?userTag=${publicacao.userTag}">
                        <strong>${publicacao.userTag}</strong>
                    </a> - ${publicacao.commentAmount || 0} respostas
                </p>
            </div>
            <div>
                <p class="discussao-info">${tempoFormatado}</p>
        `;

        if (publicacao.userId === autenticacaoUserId) {
            conteudoHTML += `
                <button id="remover-discussao" onclick="deletaDiscussao('${publicacao.publicacaoId}', '${publicacao.userId}')">
                    Remover
                </button>
            `;
        }

        conteudoHTML += `</div>`;
        publicacaoDiv.innerHTML = conteudoHTML;

        // Adiciona a publicação à lista
        publicacoesDiv.appendChild(publicacaoDiv);
    });
  }
  
  function listenForPublicacoes() {
    // Conectar ao servidor de mensagens com parâmetros na URL
    const eventSource = new EventSource(`/API/forum/stream-publicacoes`);
    eventSource.onmessage = (event) => {
        try {
            const publicacoes = JSON.parse(event.data);
            console.log(publicacoes);  // Verifica as publicações recebidas
            renderPublicacoes(publicacoes); // Renderiza as publicações recebidas
        } catch (error) {
            console.error('Erro ao processar os dados recebidos:', error);
        }
    };

    eventSource.onerror = (error) => {
        console.error('Erro na conexão com o servidor:', error);
        eventSource.close();
    };
  }
  
  function listenForFollowingPublicacoes(userTag) {
      if (!followingList) {
          console.error('FollowingList é necessário para escutar mensagens.');
          return;
      }
  
      // Conectar ao servidor de mensagens com parâmetros na URL
      const eventSource = new EventSource(`/API/forum/stream-followingpublicacoes`);
  
      eventSource.onmessage = (event) => {
          try {
              const publicacoes = JSON.parse(event.data);
              renderAll(publicacoes);
          } catch (error) {
              console.error('Erro ao processar os dados recebidos:', error);
          }
      };
  
      eventSource.onerror = (error) => {
          eventSource.close();
      };
  }
  
  async function deletaDiscussao(publicacaoId, userId) {
    try {
        const response = await fetch(`/API/forum/removerdiscussao`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ userId, publicacaoId }),
        });
  
        const responseData = await response.json();
        if (response.ok) {
        }
  
      }catch (error) {
      console.error('Erro ao salvar no Firebase:', error);
      res.status(500).json({ error: 'Erro interno do servidor.' });
    }
  }
  
  // Postar nova mensagem
  document.getElementById('post').addEventListener('click', async () => {
      const userTag = localStorage.getItem("autenticationUserTag");
  
      if (!userTag) {
          document.getElementById('statusMessage').textContent = 'A mensagem pode estar sem userTag.';
          return;
      }
  
      try {
          const response = await fetch(`/API/forum/criardiscussao`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ userTag, categoriaId, discussaoId }),
          });
  
          const responseData = await response.json();
          if (response.ok) {
              document.getElementById('statusMessage').textContent = 'Mensagem publicada com sucesso.';
              document.getElementById('discussao').value = ''; // Limpar o campo de entrada
              document.getElementById('categoria').value = ''; // Limpar o campo de entrada
          } else {
          document.getElementById('statusMessage').textContent = responseData.error || 'Erro ao publicar.';
          }
      } catch (error) {
          document.getElementById('statusMessage').textContent = `Erro: ${error.message}`;
      }
      document.getElementById('popup-novo-post').style.display = 'none';
  });
  
  let categoriaPagina;
  
  window.onload = () => {
    listenForPublicacoes();
  }
  </script>
  </html>