<main>
    <h2>Hora de descobrir seu Match!</h2>

    <div class="caixa-texto">
        <h3>Insira o seu nome/apelido</h3>
        <h4>procuramos para você</h4>
        <!-- Formulário para inserir o nome do usuário -->
        <input type="text" id="nomeUsuario" placeholder="Seu nome">
        <div>
            <!-- Botão para acionar a função match -->
            <button class="branco" id="editarNomeBtn">Match!</button>
        </div>
    </div>

    <div id="loading" style="display: none;">
        <img src="/img/carregando.gif" alt="Carregando..." />
        <div id="indicadorStatus" style="display: none;">
            <p id="statusTexto">Baixando vetores...</p>
            <!-- Barra de carregamento -->
            <progress id="barraCarregamento" value="0" max="100" style="width: 100%; height: 20px;"></progress>
        </div>
    </div>
    
    
    <div class="pagina do match">
        <div id="textoMatch" style="display: none;">
            <h3>Parece que você e <span id="nomeMatch"></span> tem muito em comum!</h3>
            <h4>Veja as obras que vocês concordam em amar e odiar!</h4>
        </div>
    
        <div class="galeria" id="galeria">
            <!-- Aqui as imagens e plaquinhas serão carregadas dinamicamente -->
        </div>
    </div>    
</main>

<style>
    main {
        text-align: center;
    }
    
    .branco {
        padding: 10px 20px;
        background-color: white; /* Branco */
        color: #333; /* Cor do texto */
        border: 1px solid #ccc; /* Borda clara */
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .branco:hover {
        background-color: #f1f1f1; /* Tom mais claro no hover */
        cursor: url('/img/cursor-mao.png'), auto;
    }

    .galeria {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); /* Layout responsivo */
        gap: 40px; /* Espaçamento entre as imagens */
        padding: 20px; /* Espaçamento em torno da galeria */
    }

    .imagem {
        background-image: url('/pages/galeria/geral/img/moldura.png');
        background-size: cover;
        background-position: center;
        border-radius: 0px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
        aspect-ratio: 1;
        position: relative;
    }

    .imagem img {
        width: 87%; /* Tamanho da imagem principal */
        height: 87%; /* Mantém a proporção da imagem */
        object-fit: cover;
    }

    .plaquinha {
        position: absolute;
        bottom: -10px;
        left: 50%;
        transform: translateX(-50%);
        width: 70%; /* Tamanho proporcional */
        height: 75px; /* Altura ajustada para a plaquinha */
        background-image: url('/img/plaquinha.png');
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
        color: #000000;
        text-align: center;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    #loading {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 9999;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
    }

    #loading img {
        width: 150px; /* Ajuste o tamanho do GIF conforme necessário */
    }

    #barraCarregamento {
        -webkit-appearance: none; /* Para o Safari */
        appearance: none;
        width: 100%;
        height: 20px;
        border-radius: 10px;
        background-color: #f1f1f1; /* Cor do fundo */
    }

    #barraCarregamento::-webkit-progress-bar {
        background-color: #f1f1f1; /* Cor do fundo da barra */
        border-radius: 10px;
    }

    #barraCarregamento::-webkit-progress-value {
        background-color: var(--cor-marrom); /* Cor da parte preenchida da barra */
        border-radius: 10px;
    }

    #barraCarregamento::-moz-progress-bar {
        background-color: var(--cor-marrom); /* Cor da parte preenchida da barra para Firefox */
        border-radius: 10px;
    }

    input[type="text"] {
        margin-top: 10px; /* Espaçamento superior para o botão */
        width: 80%; /* Largura ajustável */
        max-width: 400px; /* Limita a largura máxima */
        padding: 12px 20px; /* Espaçamento interno */
        font-size: 16px; /* Tamanho da fonte */
        border: 1px solid #ccc; /* Cor da borda */
        border-radius: 8px; /* Bordas arredondadas */
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Sombra sutil */
        outline: none; /* Remove o outline padrão */
        transition: all 0.3s ease; /* Animação suave */
        opacity: 70%;
        margin-bottom: 20px; /* Adiciona espaçamento abaixo do input */
        cursor: url('/img/cursor-texto.png'), auto;
    }

    input[type="text"]:focus {
        border-color: #4caf50; /* Cor da borda ao focar */
        box-shadow: 0 4px 8px rgba(76, 175, 80, 0.4); /* Sombra mais destacada */
        opacity: 100%;
        cursor: url('/img/cursor-texto.png'), auto;
    }

</style>


<script type="module">
import { getStorage, ref, getDownloadURL, listAll } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-storage.js";
import { initializeApp } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-app.js";

// Configuração do Firebase
const firebaseConfig = {
    apiKey: "AIzaSyDuwnu2XcSTJ1YZkgD4570AtE6uKci_nDQ",
    authDomain: "boteco-6fcfa.firebaseapp.com",
    projectId: "boteco-6fcfa",
    storageBucket: "boteco-6fcfa.appspot.com",
    messagingSenderId: "531032694476",
    appId: "1:531032694476:web:6e03bdd824b90fd2b2ec69"
};

const app = initializeApp(firebaseConfig);
const storage = getStorage(app);

/* ----- FUNÇÕES COM RELAÇÃO A ÁLGEBRA LINEAR ----- */

// Função para calcular a distância Euclidiana entre dois vetores
function calcularDistancia(vetor1, vetor2) {
    if (vetor1.length !== vetor2.length) {
        throw new Error("Ambos os vetores devem ter o mesmo número de elementos.");
    }

    let somaQuadrados = 0;
    for (let i = 0; i < vetor1.length; i++) {
        somaQuadrados += Math.pow(vetor1[i] - vetor2[i], 2);
    }
    return Math.sqrt(somaQuadrados);  // Distância Euclidiana
}

// Função para encontrar os filmes que ambos os usuários concordam ser bons ou ruins
function getAcordoFilme(vetor1, vetor2, tipo) {
    let filmesBons = [];
    let filmesRuins = [];
    
    for (let i = 0; i < vetor1.length; i++) {
        const mediaNota = (vetor1[i] + vetor2[i]) / 2;  // Média das notas dos dois usuários

        if (tipo === 'bom' && mediaNota >= 9) {
            // Se o filme for considerado bom (nota média maior ou igual a 9)
            filmesBons.push({indice: i + 1, mediaNota});
        } else if (tipo === 'ruim' && mediaNota <= 4 && vetor1[i] <= 5 && vetor2[i] <= 5) {
            // Se o filme for considerado ruim (nota média menor <= a 4) e nenhuma nota maior que 5
            filmesRuins.push({indice: i + 1, mediaNota});
        }
    }

    return tipo === 'bom' ? filmesBons : filmesRuins;
}

// Função para comparar o usuário atual com outros usuários
async function compararUsuarios(vetorUsuarioAtual) {
    const listaUsuariosRef = ref(storage, 'recomendacoes/usuarios');
    const snapshot = await listAll(listaUsuariosRef);
    
    let menorDistancia = Infinity;
    let usuarioMenorDistancia = null;

    // Obtém o elemento do status
    const indicadorStatus = document.getElementById("indicadorStatus");
    const statusTexto = document.getElementById("statusTexto");
    const barraCarregamento = document.getElementById("barraCarregamento");

    // Mostra o indicador de status
    indicadorStatus.style.display = 'block';

    // Inicializa o contador de comparações
    let comparacoesFeitas = 0;
    const totalUsuarios = (snapshot.items.length) - 1;

    for (const itemRef of snapshot.items) {
        // Não compara com o próprio usuário
        if (itemRef.name === `${document.getElementById("nomeUsuario").value}.txt`) continue;

        // Atualiza o status e a barra de progresso
        comparacoesFeitas++;
        statusTexto.textContent = `Comparei ${comparacoesFeitas} de ${totalUsuarios} vetores`;
        barraCarregamento.value = (comparacoesFeitas / totalUsuarios) * 100; // Atualiza a barra de progresso

        const fileUrl = await getDownloadURL(itemRef);
        const notasOutroUsuario = await obterNotasDoArquivo(itemRef.name); // Função que extrai as notas do arquivo

        if (notasOutroUsuario) {
            const distancia = calcularDistancia(vetorUsuarioAtual, notasOutroUsuario);
            
            if (distancia < menorDistancia) {
                menorDistancia = distancia;
                usuarioMenorDistancia = itemRef;
            }
        }
    }

    console.log('Menor Distância:', menorDistancia, 'Usuário:', usuarioMenorDistancia?.name.replace('.txt', ''));

    // Esconde o indicador de status e barra de progresso ao final
    indicadorStatus.style.display = 'none';

    return usuarioMenorDistancia;
}

// Objeto para armazenar os dados localmente (cache)
let cacheNotas = {};

/* ----- FUNÇÕES DE LEITURA DA NÚVEM ----- */

// Função para obter o vetor de notas do arquivo de um usuário específico
async function obterNotasDoArquivo(nomeUsuario) {
    // Verifica se já temos os dados no cache
    if (cacheNotas[nomeUsuario]) {
        return cacheNotas[nomeUsuario]; // Retorna os dados do cache
    }

    // Garante que a extensão .txt não seja duplicada
    const nomeSemExtensao = nomeUsuario.replace('.txt', ''); // Remove .txt se já estiver no nome
    const filePath = `recomendacoes/usuarios/${nomeSemExtensao}.txt`; // Adiciona a extensão .txt apenas uma vez
    const fileRef = ref(storage, filePath);

    try {
        const fileUrl = await getDownloadURL(fileRef);
        const response = await fetch(fileUrl);
        const texto = await response.text();
        
        const linhas = texto.split('\n');
        const notasString = linhas[1];  // A segunda linha contém o array de notas
        const notas = JSON.parse(notasString); // Converte o array JSON para um vetor de números
        
        // Armazena os dados no cache
        cacheNotas[nomeUsuario] = notas;
        return notas;
    } catch (error) {
        console.error("Erro ao obter notas:", error);
        return null;
    }
}

/* ----- FUNÇÕES DE LEITURA ----- */

// Função para exibir o match com o usuário
async function exibirMatch(nomeUsuario) {
    const nomeExibicao = nomeUsuario.replace('.txt', '');
    const vetorUsuarioAtual = await obterNotasDoArquivo(nomeExibicao);

    if (vetorUsuarioAtual) {
        const usuarioMenorDistancia = await compararUsuarios(vetorUsuarioAtual);

        if (!usuarioMenorDistancia) {
            alert("Nenhum outro usuário foi encontrado para comparação.");
            return;
        }

        document.getElementById('nomeMatch').textContent = usuarioMenorDistancia.name.replace('.txt', '');

        // Carrega os dados para a galeria
        const notasMenorDistancia = await obterNotasDoArquivo(usuarioMenorDistancia.name.replace('.txt', ''));
        if (notasMenorDistancia) {
            const filmesBons = getAcordoFilme(vetorUsuarioAtual, notasMenorDistancia, 'bom');
            const filmesRuins = getAcordoFilme(vetorUsuarioAtual, notasMenorDistancia, 'ruim');

            const galeria = document.getElementById('galeria');
            galeria.innerHTML = ""; // Limpa a galeria

            filmesBons.forEach(filme => {
                const img = document.createElement('div');
                img.classList.add('imagem');
                img.innerHTML = `<img src="/img/recomendacao/${filme.indice}.png" alt=""><div class="plaquinha">⭐Bomzão!⭐</div>`;
                galeria.appendChild(img);
            });

            filmesRuins.forEach(filme => {
                const img = document.createElement('div');
                img.classList.add('imagem');
                img.innerHTML = `<img src="/img/recomendacao/${filme.indice}.png" alt=""><div class="plaquinha">💩Ruinzinho💩</div>`;
                galeria.appendChild(img);
            });

            // Exibe o texto do match
            document.getElementById("textoMatch").style.display = 'block';
        }
    }
}

/* ----- BOTAÇÃO DE AÇÃO ----- */

// Evento para buscar o match quando o botão for clicado
document.getElementById("editarNomeBtn").addEventListener("click", async function() {
    const nomeUsuario = document.getElementById("nomeUsuario").value;

    // Mostra o GIF de carregamento
    const loadingElement = document.getElementById("loading");
    loadingElement.style.display = 'block';

    try {
        // Chama a função de exibir o match
        await exibirMatch(nomeUsuario);
    } catch (error) {
        console.error("Erro ao exibir match:", error);
    } finally {
        // Esconde o GIF de carregamento
        loadingElement.style.display = 'none';
    }
});

</script>  