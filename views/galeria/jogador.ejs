<main>
    <div class="titulo">
        <h1>JogadorStickman</h1>
    </div>
    <div class="galeria" id="galeria">
        <!-- As imagens serão adicionadas aqui dinamicamente -->
    </div>
    <div id="mensagem" style="display: none;"></div> <!-- Para exibir mensagens -->
</main>

<!-- Popup para exibir a imagem com fundo desfocado e botões -->
<div id="popup" class="popup">
    <div id="popup-conteudo" class="popup-conteudo">
        <img id="imagem-popup" src="" alt="Imagem da obra">
        <div class="acoes">
            <button onclick="removerObra(document.getElementById('nome-imagem').textContent)">Deletar</button>
            <button onclick="fecharPopup()">Fechar</button>
        </div>
        <div id="nome-imagem" style="margin-top: 10px;"></div>
    </div>
</div>


<script type="module">
    import { getStorage, ref, uploadBytes, getDownloadURL, listAll, deleteObject } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-storage.js";
    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-app.js";
    
    // Configuração do Firebase
    const firebaseConfig = {
        apiKey: "AIzaSyDuwnu2XcSTJ1YZkgD4570AtE6uKci_nDQ",
        authDomain: "boteco-6fcfa.firebaseapp.com",
        projectId: "boteco-6fcfa",
        storageBucket: "boteco-6fcfa.appspot.com",
        messagingSenderId: "531032694476",
        appId: "1:531032694476:web:6e03bdd824b90fd2b2ec69"
    };
    
    const app = initializeApp(firebaseConfig);
    const storage = getStorage(app);
    let obrasLocais = [];
    
    
    // Carrega imagens locais e Firebase
    async function carregarImagensFirebase() {
        const galeriaRef = ref(storage, 'galeria/jogador');
        const result = await listAll(galeriaRef);
    
        obrasLocais = await Promise.all(result.items.map(async itemRef => {
            const url = await getDownloadURL(itemRef);
            const nome = itemRef.name.split('.png')[0];
            return { nome, url };
        }));
    
        carregarImagens();
    }

    async function carregarImagens() {
        const galeria = document.getElementById('galeria');
        galeria.innerHTML = '';

        // Adiciona as imagens à galeria
        obrasLocais.forEach(imagem => {
            adicionarItemLista(imagem.url, imagem.nome);
        });

        // Cria o botão de adicionar imagem
        const adicionarQuadro = document.createElement('div');
        adicionarQuadro.className = 'imagem adicionar-quadro';
        adicionarQuadro.innerHTML = `<span>+</span>`;
        adicionarQuadro.onclick = abrirPopup; // Abre o popup de adicionar imagem

        // Adiciona o botão de adicionar imagem ao final da galeria
        galeria.appendChild(adicionarQuadro);
    }
    
    // Adiciona item à lista de imagens
    function adicionarItemLista(url, nome) {
        const galeria = document.getElementById('galeria');
        const divImagem = document.createElement('div');
        divImagem.className = 'imagem';
        
        divImagem.innerHTML = `
            <img src="${url}" alt="" onclick="abrirPopupComImagem('${url}', '${nome}')">
            <div class="plaquinha">${nome}</div>
        `;
        
        // Adiciona a imagem antes do quadro de "+"
        galeria.insertBefore(divImagem, galeria.lastChild);
    }
    
    // Upload de arquivo para Firebase
    async function uploadFile() {
        const fileInput = document.getElementById('fileInput');
        const nomeObraInput = document.getElementById('nomeObra');
        const nomeObra = nomeObraInput.value.trim();
    
        if (fileInput.files.length === 0) {
            exibirMensagem('Por favor, selecione um arquivo!', 'error');
            return;
        }
    
        const file = fileInput.files[0];
        if (!file.type.startsWith('image/')) {
            exibirMensagem('Por favor, selecione um arquivo de imagem válido!', 'error');
            return;
        }
    
        const imageName = `${nomeObra}.png`;
        const imagePath = `galeria/jogador/${imageName}`;
        const imageRef = ref(storage, imagePath);
    
        try {
            const snapshot = await uploadBytes(imageRef, file);
            const downloadURL = await getDownloadURL(snapshot.ref);
            
            exibirMensagem('Arquivo enviado com sucesso!', 'success');
    
            obrasLocais.push({ nome: nomeObra, url: downloadURL });
            adicionarItemLista(downloadURL, nomeObra);
            
            fecharPopup();
            fileInput.value = '';
            nomeObraInput.value = '';
        } catch (error) {
            console.error('Erro ao enviar o arquivo:', error);
            exibirMensagem('Erro ao enviar o arquivo. Verifique a conexão e tente novamente.', 'error');
        }
    }
    
    // Remoção de obra do Firebase
    async function removerObra(nomeObra) {
        const imagePath = `galeria/jogador/${nomeObra}.png`;
        
        try {
            await deleteObject(ref(storage, imagePath));
            
            obrasLocais = obrasLocais.filter(obra => obra.nome !== nomeObra);
            exibirMensagem('Imagem removida com sucesso!', 'success');
            
            fecharPopup();
            carregarImagens();
        } catch (error) {
            console.error('Erro ao remover a obra:', error);
            exibirMensagem('Erro ao remover a obra. Tente novamente.', 'error');
        }
    }
    
    // Exibe mensagem de sucesso/erro
    function exibirMensagem(mensagem, tipo) {
        const mensagemDiv = document.getElementById('mensagem');
        mensagemDiv.textContent = mensagem;
        mensagemDiv.className = tipo === 'success' ? 'success' : 'error';
        mensagemDiv.style.display = 'block';
    
        setTimeout(() => {
            mensagemDiv.style.display = 'none';
        }, 5000);
    }
    
    // Função para abrir o popup com a imagem
    function abrirPopupComImagem(url, nome) {
        const popup = document.getElementById('popup');
        const popupConteudo = document.getElementById('popup-conteudo');
        const imagemPopup = document.getElementById('imagem-popup');
        const nomeImagem = document.getElementById('nome-imagem');
        
        // Garante que o popup tenha a estrutura de imagem e nome
        popupConteudo.innerHTML = `
            <img id="imagem-popup" src="${url}" alt="Imagem da obra">
            <div class="acoes">
                <button class="deletar" onclick="removerObra('${nome}')">Deletar</button>
                <button class="fechar" onclick="fecharPopup()">Fechar</button>
            </div>
            <div id="nome-imagem" style="margin-top: 10px;">${nome}</div>
        `;

        // Garantir que o layout seja recalculado após a adição da imagem
        setTimeout(() => {
            popup.style.display = 'flex';
        }, 50); // Pequeno atraso para garantir que o layout seja atualizado

        // Exibe o popup
        popup.style.display = 'flex';
    }

    
    // Função de abrir popup para o formulário de upload
    function abrirPopup() {
        const popup = document.getElementById('popup');
        const popupConteudo = document.getElementById('popup-conteudo');
        const imagemPopup = document.getElementById('imagem-popup');
        const nomeImagem = document.getElementById('nome-imagem');
        
        // Defina o conteúdo do popup para o formulário de envio de nova obra
        popupConteudo.innerHTML = `
            <h2>Enviar nova obra</h2>
            <form id="formUpload">
                <label for="nomeObra">Nome da Obra:</label>
                <input type="text" id="nomeObra" placeholder="Nome da obra" required>
                <br><br>
                <label for="fileInput">Escolha uma imagem:</label>
                <input type="file" id="fileInput" accept="image/*" required>
                <br><br>
                <button type="button" onclick="uploadFile()">Enviar</button>
                <button type="button" onclick="fecharPopup()">Fechar</button>
            </form>
        `;

        // Exibe o popup
        popup.style.display = 'flex';
        popupConteudo.style.display = 'block';
    }

    // Para a função de fechar o popup
    function fecharPopup() {
        const popup = document.getElementById('popup');
        popup.style.display = 'none';
    }
    
    // Tornar as funções globais
    window.uploadFile = uploadFile;
    window.removerObra = removerObra;
    window.abrirPopupComImagem = abrirPopupComImagem; // Corrigido para abrir o popup com imagem
    window.fecharPopup = fecharPopup;
    window.abrirPopup = abrirPopup;
    window.onload = carregarImagensFirebase;
    
    // Carregar imagens do Firebase ao iniciar
    
</script>
    

<style>
body{
    background-color: #71a884;
    font-family: "Roboto Slab", serif;
    font-optical-sizing: auto;
    font-weight: <weight>;
    font-style: normal;
}

.titulo{
    text-align: center;
}

.galeria {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); /* Layout responsivo */
    gap: 40px; /* Espaçamento entre as imagens */
    padding: 20px; /* Espaçamento em torno da galeria */
}

.imagem {
    background-image: url('/img/moldura.png');
    background-size: cover;
    background-position: center;
    border-radius: 0px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    aspect-ratio: 1;
    position: relative;
}

.imagem img {
    width: 87%; /* Tamanho da imagem principal */
    height: 87%; /* Mantém a proporção da imagem */
    border-radius: 1px;
    object-fit: cover;
    cursor: url('/img/cursor-mao.png'), auto;
}

.plaquinha {
    position: absolute;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%);
    width: 70%; /* Tamanho proporcional */
    height: 75px; /* Altura ajustada para a plaquinha */
    background-image: url('/img/plaquinha.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    color: #000000;
    text-align: center;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

/* Novo estilo para o popup */
.popup {
    display: none; /* Inicialmente oculto */
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7); /* Fundo semi-transparente */
    z-index: 1000;
    justify-content: center;
    align-items: center;
    backdrop-filter: blur(8px); /* Aplica o efeito de desfoque */
    overflow: hidden; /* Garante que nada saia da tela */
}

/* Estilo para o conteúdo do popup */
.popup-conteudo {
    background-color: rgba(255, 255, 255, 0.212);
    padding: 20px;
    border-radius: 8px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center; /* Garante que os itens sejam centralizados verticalmente */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    position: relative;
    width: 80%; /* Ajuste de largura */
    max-width: 800px; /* Limite máximo de largura */
    max-height: 90vh; /* Limite máximo de altura */
    overflow: auto; /* Se o conteúdo exceder, exibe barras de rolagem */
}

.popup-conteudo img {
    justify-content: center;
    max-width: 100%; /* Limita a largura da imagem */
    max-height: 60vh; /* Limita a altura da imagem */
    object-fit: contain; /* Garante que a imagem mantenha a proporção correta */
    border-radius: 8px;
}

.popup-conteudo .acoes {
    margin-top: 20px;
    display: flex;
    gap: 10px;
    justify-content: center; /* Centraliza os botões */
}

.popup-conteudo .acoes .deletar {
    padding: 10px 20px;
    background-color: #ff4c4c; /* Vermelho */
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.popup-conteudo .acoes .deletar:hover {
    background-color: #ff2a2a; /* Tom mais intenso de vermelho */
    cursor: url('/img/cursor-mao.png'), auto;
}

/* Estilo para o botão de fechar */
.popup-conteudo .acoes .fechar {
    padding: 10px 20px;
    background-color: white; /* Branco */
    color: #333; /* Cor do texto */
    border: 1px solid #ccc; /* Borda clara */
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.popup-conteudo .acoes .fechar:hover {
    background-color: #f1f1f1; /* Tom mais claro no hover */
    cursor: url('/img/cursor-mao.png'), auto;
}
</style>